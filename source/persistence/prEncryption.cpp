/**
 * prEncryption.cpp
 *
 *  Copyright 2014 Paul Michael McNab
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */


#include "prEncryption.h"
#include "../debug/prTrace.h"
#include "../core/prMacros.h"


//using namespace Proteus::Core;


// ----------------------------------------------------------------------------
// Encrpyption key
// ----------------------------------------------------------------------------
namespace
{
    const u8 encryptionKey[] = 
    {
        0x8b, 0x74, 0x28, 0xf1, 0x56, 0x9d, 0x59, 0x9f, 0xcc, 0xf6, 0x5a, 0xb9, 0x69, 0x9e, 0x1d, 0x78, 
        0x50, 0xc0, 0x77, 0x72, 0x8e, 0xc2, 0x7f, 0x6e, 0x9f, 0xbf, 0x37, 0x77, 0x33, 0x38, 0x6e, 0x2f, 
        0x32, 0x06, 0xe4, 0x66, 0xfd, 0x93, 0xb0, 0xeb, 0xf7, 0x4a, 0xdf, 0xa2, 0x44, 0x4c, 0x5e, 0xd7, 
        0xd0, 0x65, 0x1a, 0xd2, 0x93, 0x3e, 0x65, 0xac, 0x14, 0xd4, 0x9c, 0x61, 0x2c, 0x28, 0x06, 0x25, 
        0x0d, 0x39, 0x00, 0xfc, 0x82, 0x2f, 0x57, 0x85, 0x79, 0xd9, 0xf6, 0x16, 0xbe, 0x59, 0xc1, 0x0e, 
        0x09, 0x1e, 0xc0, 0x67, 0x3b, 0x13, 0x80, 0x8b, 0xe5, 0x16, 0xb6, 0x69, 0x0a, 0xac, 0x26, 0xc7, 
        0x26, 0xf3, 0xc3, 0xda, 0x6e, 0xd8, 0x18, 0x14, 0x5a, 0x89, 0xe6, 0x3d, 0x61, 0x2e, 0x0f, 0xc5, 
        0x03, 0xd4, 0xb2, 0x59, 0x0d, 0xa9, 0x98, 0xb4, 0x19, 0x6f, 0xcf, 0xb8, 0x54, 0x2b, 0x94, 0xbd, 
        0x84, 0x1d, 0x77, 0x29, 0x49, 0xf5, 0xb9, 0x40, 0xa2, 0x44, 0xf9, 0x3e, 0xb4, 0x31, 0x0f, 0xa3, 
        0xc7, 0x6d, 0x39, 0xcf, 0x92, 0x69, 0x75, 0xce, 0xb8, 0xc6, 0x2d, 0x75, 0x92, 0x0d, 0x19, 0xae, 
        0x2f, 0xa0, 0x62, 0x10, 0x99, 0xf0, 0x03, 0xb3, 0x5a, 0xf1, 0x75, 0x42, 0x3f, 0xcb, 0x8b, 0x51, 
        0x5c, 0xd3, 0x9b, 0xf1, 0x50, 0xb9, 0xde, 0x82, 0xcb, 0x02, 0x19, 0xc9, 0x4d, 0xb9, 0x7d, 0x43, 
        0x30, 0x62, 0xcc, 0xb8, 0xe8, 0x30, 0xbe, 0x12, 0x8a, 0x78, 0xa3, 0x70, 0x8b, 0x64, 0x49, 0x77, 
        0xca, 0xec, 0x20, 0xe8, 0xd1, 0x02, 0x9c, 0x78, 0x58, 0x0d, 0xdb, 0xdc, 0x0b, 0x99, 0x88, 0x23, 
        0x8e, 0x4d, 0xff, 0x48, 0xbd, 0x1d, 0xb2, 0x08, 0x38, 0xc1, 0xcb, 0xf1, 0x1f, 0x65, 0x13, 0xbc, 
        0x1a, 0xa2, 0x12, 0xdc, 0x9d, 0xad, 0x78, 0x57, 0x6a, 0xce, 0xbb, 0xd5, 0x57, 0x14, 0x02, 0xf6, 
        0x51, 0x48, 0x42, 0xe9, 0xa1, 0x1f, 0xa6, 0x3b, 0x6e, 0xb3, 0x35, 0xec, 0x83, 0x34, 0xaf, 0xc8, 
        0x53, 0xdb, 0xb7, 0xf4, 0x3a, 0x20, 0x37, 0xc8, 0x06, 0x2d, 0x01, 0xdc, 0xb6, 0x92, 0xb2, 0x66, 
        0x82, 0x3a, 0xdc, 0xc3, 0x1b, 0x9e, 0x64, 0x53, 0x33, 0x38, 0x28, 0x8a, 0x40, 0x3b, 0xe5, 0x44, 
        0x7d, 0x81, 0x59, 0x59, 0x32, 0xc5, 0xa4, 0x72, 0x36, 0x12, 0xf4, 0x1b, 0xb2, 0x7b, 0x61, 0x19, 
        0x27, 0x0d, 0x16, 0xfd, 0xb3, 0x02, 0xb2, 0xf9, 0x90, 0x37, 0xee, 0xf3, 0xdd, 0xe1, 0x7f, 0xd8, 
        0xa1, 0x7b, 0x3e, 0x33, 0x0d, 0x03, 0x86, 0xfe, 0x01, 0x65, 0xdd, 0xb7, 0xd2, 0x38, 0xd7, 0xb7, 
        0x4b, 0xa8, 0x38, 0xc0, 0xf1, 0xb3, 0x59, 0xd5, 0x8b, 0x99, 0xcd, 0x4e, 0xe2, 0x8d, 0x43, 0x2b, 
        0xc6, 0xb1, 0xae, 0xa9, 0x51, 0x41, 0xa4, 0x13, 0x70, 0x0e, 0x04, 0xdb, 0x9e, 0x2f, 0xdc, 0xe9, 
        0xf3, 0xf3, 0x8a, 0x33, 0x5e, 0x1a, 0x21, 0x8e, 0x2f, 0x44, 0x0e, 0xc3, 0xd8, 0xa9, 0xfb, 0xe6, 
        0xf4, 0x0b, 0xf3, 0xe3, 0x88, 0xe9, 0xc7, 0x5a, 0x89, 0xf6, 0xb1, 0xad, 0x9f, 0xc9, 0x38, 0x57, 
        0x29, 0xd6, 0x53, 0x7f, 0x81, 0x9d, 0xd1, 0xcc, 0x81, 0x21, 0xf8, 0x7c, 0x46, 0x9c, 0x6d, 0xb0, 
        0x33, 0x71, 0x54, 0x0a, 0x39, 0x62, 0xb7, 0x7a, 0x56, 0x03, 0x2c, 0x55, 0x5c, 0x6e, 0xb2, 0xa8, 
        0xf4, 0x39, 0xdd, 0xcb, 0xe2, 0xa5, 0x33, 0x39, 0x8b, 0x18, 0xd5, 0x9e, 0xb4, 0xce, 0x62, 0x32, 
        0x8c, 0xcb, 0x18, 0x46, 0xed, 0x14, 0x3c, 0x1c, 0xdf, 0x1e, 0xbc, 0xfc, 0x5e, 0x87, 0x14, 0x84, 
        0x5d, 0x04, 0x6e, 0x40, 0x0a, 0x9b, 0x0d, 0x7b, 0x54, 0x12, 0xeb, 0x54, 0xaa, 0xa7, 0xa1, 0x14, 
        0x06, 0x01, 0x88, 0xbe, 0x2b, 0x67, 0x1e, 0xe8, 0x2b, 0x30, 0xab, 0xca, 0x2b, 0x7a, 0x24, 0x95, 
        0x6a, 0x1f, 0x4f, 0x06, 0x80, 0xe5, 0x28, 0x3a, 0xe4, 0xf5, 0x84, 0xc4, 0xb1, 0x8f, 0xf4, 0xfd, 
        0xaa, 0xfb, 0xec, 0x9b, 0x7b, 0xc3, 0x24, 0x85, 0x42, 0x1f, 0x3f, 0xe6, 0x4d, 0xb1, 0xab, 0x80, 
        0x25, 0x72, 0xc8, 0x44, 0xcc, 0xed, 0x4c, 0x1f, 0x44, 0xab, 0xe6, 0x16, 0x50, 0xee, 0x21, 0x95, 
        0x7f, 0xa2, 0x8c, 0x04, 0x65, 0x90, 0x18, 0x9c, 0x2c, 0xd5, 0xc1, 0x79, 0x4c, 0x92, 0x70, 0xf0, 
        0x96, 0xe6, 0x20, 0x22, 0x77, 0x19, 0x40, 0xd1, 0x7b, 0x1a, 0x59, 0x73, 0x10, 0x2c, 0xf1, 0x85, 
        0x8d, 0xdc, 0xaf, 0x22, 0x72, 0x36, 0xc0, 0xd4, 0xf1, 0x38, 0x78, 0xaa, 0xae, 0x87, 0x3d, 0x8b, 
        0xc4, 0x61, 0xa1, 0xc9, 0x08, 0xd3, 0xce, 0xf9, 0x91, 0x2c, 0x27, 0x03, 0x78, 0xb1, 0x2c, 0x75, 
        0xdc, 0x92, 0x9e, 0x1d, 0x29, 0x1d, 0xe4, 0xd6, 0x9a, 0x32, 0xae, 0xa2, 0xfd, 0xf7, 0xd8, 0xf9, 
        0xb7, 0xcc, 0x91, 0x61, 0x07, 0x82, 0xbc, 0x3f, 0x8f, 0xc7, 0x96, 0xed, 0x10, 0xe5, 0x9a, 0x0c, 
        0x75, 0xad, 0xa2, 0x1c, 0x13, 0xad, 0x4e, 0x4a, 0x2f, 0xaa, 0xa9, 0x88, 0xc0, 0x4a, 0x0a, 0xe3, 
        0x77, 0x10, 0x39, 0x11, 0xfd, 0x8d, 0xd3, 0x4a, 0x7c, 0xd5, 0xf0, 0x5a, 0x60, 0x31, 0x02, 0xf3, 
        0x5f, 0x13, 0x01, 0x47, 0xb6, 0x4f, 0xc5, 0xd6, 0xb6, 0x87, 0xb3, 0x85, 0x80, 0xe7, 0x9b, 0xf1, 
        0x0d, 0x13, 0xe1, 0x02, 0x71, 0x5e, 0xdb, 0xc3, 0x60, 0x3d, 0x7b, 0x71, 0xf1, 0xfb, 0x2e, 0xd2, 
        0xa2, 0xae, 0x03, 0xc7, 0x9c, 0x69, 0x10, 0x25, 0x39, 0xb3, 0x12, 0xc1, 0xc4, 0x38, 0x53, 0xca, 
        0x80, 0xbf, 0xd1, 0x5c, 0xeb, 0x5c, 0x9c, 0x51, 0x43, 0xe7, 0x80, 0x5b, 0x4a, 0xac, 0xe4, 0x50, 
        0x47, 0x64, 0xf2, 0xc4, 0x4d, 0x65, 0xf8, 0xdd, 0xbf, 0x15, 0x0e, 0x63, 0x14, 0xa4, 0xfa, 0x17, 
        0xd8, 0xfb, 0x50, 0x46, 0xf3, 0xef, 0xde, 0x9d, 0x2e, 0xbb, 0x46, 0x3f, 0xf3, 0xad, 0xed, 0x15, 
        0x54, 0x1f, 0x14, 0x65, 0x50, 0xa9, 0x45, 0xa7, 0x51, 0x95, 0xf1, 0x94, 0xf8, 0x93, 0x57, 0x7f, 
        0x1d, 0xae, 0xa7, 0xe8, 0x12, 0x7f, 0x68, 0x4f, 0x28, 0xa1, 0x17, 0x46, 0x75, 0x65, 0x11, 0xca, 
        0xd4, 0xc6, 0xb3, 0xd3, 0x2c, 0x9f, 0xbf, 0x2a, 0xf6, 0x1b, 0x01, 0x7b, 0xf9, 0x6d, 0x33, 0xab, 
        0x58, 0xc2, 0x1f, 0x6b, 0xcf, 0x74, 0x03, 0x0e, 0x3a, 0x81, 0x39, 0x97, 0x57, 0x3b, 0x17, 0x17, 
        0xcc, 0x41, 0x15, 0x36, 0x6c, 0xad, 0x2d, 0x0f, 0xb6, 0x8f, 0x88, 0x41, 0x9e, 0x9b, 0x56, 0x42, 
        0x91, 0x1e, 0xfe, 0xf7, 0xb3, 0x37, 0x77, 0x82, 0x6b, 0x43, 0xf5, 0x5c, 0x21, 0x99, 0xc9, 0xa3, 
        0x46, 0x78, 0x82, 0xb5, 0x95, 0x3d, 0x59, 0xfd, 0x99, 0xd9, 0xcc, 0x0d, 0x70, 0x83, 0x88, 0xed, 
        0xce, 0xaa, 0x8c, 0xb3, 0x45, 0x2e, 0x8c, 0x54, 0xc3, 0xcf, 0x93, 0xba, 0x5c, 0xe6, 0xed, 0x17, 
        0x49, 0x53, 0x44, 0x78, 0x31, 0xb6, 0x09, 0x9d, 0xa8, 0xe2, 0x16, 0x08, 0xf6, 0x8e, 0x91, 0x54, 
        0x19, 0x4e, 0x13, 0xc8, 0x0d, 0xc2, 0x09, 0x2c, 0x4a, 0x0d, 0x5b, 0xdb, 0x8f, 0x89, 0x4c, 0x1a, 
        0xde, 0xba, 0xa2, 0xa8, 0xc7, 0x80, 0x06, 0x97, 0xea, 0x90, 0xad, 0x59, 0xb8, 0x24, 0x38, 0x1e, 
        0x79, 0xf2, 0xd9, 0x5e, 0x93, 0x5b, 0xb8, 0xb1, 0x09, 0xe6, 0x95, 0xe7, 0x42, 0xec, 0xae, 0x55, 
        0x0c, 0x95, 0xe3, 0x6d, 0xe0, 0x03, 0x18, 0x92, 0x68, 0xcc, 0xdb, 0x2a, 0x3e, 0xae, 0x46, 0xf4, 
        0xf7, 0x7e, 0x27, 0x9b, 0x60, 0x62, 0x5f, 0x8c, 0x07, 0x40, 0x88, 0x05, 0xfd, 0x76, 0xdb, 0x6f, 
        0xdb, 0xcc, 0x50, 0xee, 0x03, 0xa6, 0x06, 0x36, 0x28, 0x7f, 0xe6, 0xa0, 0x11, 0x92, 0x84, 0x7d, 
    };
}


/// ---------------------------------------------------------------------------
/// Encrpypts a block of data.
/// ---------------------------------------------------------------------------
void prEncrypt(u8 *pData, u32 length)
{
    PRASSERT(pData);
    PRASSERT(length > 0);

    u32 dataPos = 0;
    u32 keysPos = 0;
    u32 sizeKey = PRARRAY_SIZE(encryptionKey);

    for (u32 i=0; i<length; i++)
    {
        pData[dataPos++] ^= encryptionKey[keysPos++];

        if (keysPos >= sizeKey)
            keysPos = 0;
    }
}


/// ---------------------------------------------------------------------------
/// Decrpypts a block of data.
/// ---------------------------------------------------------------------------
void prDecrypt(u8 *pData, u32 length)
{
    PRASSERT(pData);
    PRASSERT(length > 0);

    u32 dataPos = 0;
    u32 keysPos = 0;
    u32 sizeKey = PRARRAY_SIZE(encryptionKey);

    for (u32 i=0; i<length; i++)
    {
        pData[dataPos++] ^= encryptionKey[keysPos++];

        if (keysPos >= sizeKey)
            keysPos = 0;
    }
}
